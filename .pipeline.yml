# .pipeline.yml workflow for building test stability CI
docker: "docker.west.isilon.com/jenkins/jenkins-base-ssh"
reuseWorkspace: true
env:
    PIP_INDEX_URL: http://artifactory.west.isilon.com/artifactory/api/pypi/pypi-repo/simple
    PIP_TRUSTED_HOST: artifactory.west.isilon.com
    SSH_OPTS: "-oBatchMode=yes -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
stages:
    checkov:
        name: "Checkov Checks"
        steps:
            checkov_checks:
                name: "Checkov run checks"
                language:
                    python: 3.10
                command:
                    - pip install checkov
                    - |
                      #!/bin/bash -e
                      cd ${JENKINS_BUILD_DIR}
                      checkov -d ./ --skip-path Docker* --skip-check CKV_AZURE_1
    publish:
        name: "Publish"
        steps:
            tag:
                name: "Tag release"
                command:
                    - |
                      #!/bin/bash -ex
                      if [[ "$JENKINS_BASE" != "$JENKINS_BRANCH" ]]; then
                          echo "Skipped Documentation deploy stage"
                          exit 0
                      fi
                      cd ${JENKINS_BUILD_DIR}
                      git config --global user.email "deploy@jenkins-ci.org"
                      git config --global user.name "Deployment Bot (from Jenkins CI)"
                      git clean -fdx
                      mkdir .release
                      while read line; do
                          cp -r $line .release
                      done < releases.txt
                      git reset --hard origin/release
                      rm -rf ./*
                      mv -f .release/* ./
                      rmdir .release
                      git add -A
                      git commit -m "Jenkins CI automated release."
                      git push origin HEAD:release
                      TAG="release-$(git rev-parse --short HEAD)"
                      HASH=`git rev-parse HEAD`
                      git tag -a -m "Jenkins CI automated release." "$TAG" "$HASH"
                      git push origin "$TAG"
